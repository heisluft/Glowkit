From 202ce803f9ed2d7f2239c984f7d7af9db754b1ec Mon Sep 17 00:00:00 2001
From: momothereal <momothereal.mc@gmail.com>
Date: Thu, 27 Dec 2018 19:23:22 -0500
Subject: [PATCH] 1.13-HACK: Add new Entity classes


diff --git a/src/main/java/org/bukkit/entity/Cod.java b/src/main/java/org/bukkit/entity/Cod.java
new file mode 100644
index 00000000..191ce6c0
--- /dev/null
+++ b/src/main/java/org/bukkit/entity/Cod.java
@@ -0,0 +1,7 @@
+
+package org.bukkit.entity;
+
+/**
+ * Represents a cod fish.
+ */
+public interface Cod extends Fish { }
diff --git a/src/main/java/org/bukkit/entity/Dolphin.java b/src/main/java/org/bukkit/entity/Dolphin.java
new file mode 100644
index 00000000..f00eaadc
--- /dev/null
+++ b/src/main/java/org/bukkit/entity/Dolphin.java
@@ -0,0 +1,3 @@
+package org.bukkit.entity;
+
+public interface Dolphin extends WaterMob { }
diff --git a/src/main/java/org/bukkit/entity/Drowned.java b/src/main/java/org/bukkit/entity/Drowned.java
new file mode 100644
index 00000000..1dee177a
--- /dev/null
+++ b/src/main/java/org/bukkit/entity/Drowned.java
@@ -0,0 +1,6 @@
+package org.bukkit.entity;
+
+/**
+ * Drowned zombie.
+ */
+public interface Drowned extends Zombie { }
diff --git a/src/main/java/org/bukkit/entity/EntityType.java b/src/main/java/org/bukkit/entity/EntityType.java
index 588e6048..f8bf9e6f 100644
--- a/src/main/java/org/bukkit/entity/EntityType.java
+++ b/src/main/java/org/bukkit/entity/EntityType.java
@@ -28,7 +28,7 @@ public enum EntityType {
     /**
      * An experience orb.
      */
-    EXPERIENCE_ORB("xp_orb", ExperienceOrb.class, 2),
+    EXPERIENCE_ORB("experience_orb", ExperienceOrb.class, 2),
     /**
      * @see AreaEffectCloud
      */
@@ -80,7 +80,7 @@ public enum EntityType {
     /**
      * An ender eye signal.
      */
-    ENDER_SIGNAL("eye_of_ender_signal", EnderSignal.class, 15),
+    ENDER_SIGNAL("eye_of_ender", EnderSignal.class, 15),
     /**
      * A flying splash potion.
      */
@@ -88,7 +88,7 @@ public enum EntityType {
     /**
      * A flying experience bottle.
      */
-    THROWN_EXP_BOTTLE("xp_bottle", ThrownExpBottle.class, 17),
+    THROWN_EXP_BOTTLE("experience_bottle", ThrownExpBottle.class, 17),
     /**
      * An item frame on a wall.
      */
@@ -108,7 +108,7 @@ public enum EntityType {
     /**
      * Internal representation of a Firework once it has been launched.
      */
-    FIREWORK("fireworks_rocket", Firework.class, 22, false),
+    FIREWORK("firework_rocket", Firework.class, 22, false),
     /**
      * @see Husk
      */
@@ -152,11 +152,11 @@ public enum EntityType {
     /**
      * @see EvokerFangs
      */
-    EVOKER_FANGS("evocation_fangs", EvokerFangs.class, 33),
+    EVOKER_FANGS("evoker_fangs", EvokerFangs.class, 33),
     /**
      * @see Evoker
      */
-    EVOKER("evocation_illager", Evoker.class, 34),
+    EVOKER("evoker", Evoker.class, 34),
     /**
      * @see Vex
      */
@@ -164,15 +164,15 @@ public enum EntityType {
     /**
      * @see Vindicator
      */
-    VINDICATOR("vindication_illager", Vindicator.class, 36),
+    VINDICATOR("vindicator", Vindicator.class, 36),
     /**
      * @see Illusioner
      */
-    ILLUSIONER("illusion_illager", Illusioner.class, 37),
+    ILLUSIONER("illusioner", Illusioner.class, 37),
     /**
      * @see CommandMinecart
      */
-    MINECART_COMMAND("commandblock_minecart", CommandMinecart.class, 40),
+    MINECART_COMMAND("command_block_minecart", CommandMinecart.class, 40),
     /**
      * A placed boat.
      */
@@ -228,9 +228,9 @@ public enum EntityType {
     SQUID("squid", Squid.class, 94),
     WOLF("wolf", Wolf.class, 95),
     MUSHROOM_COW("mooshroom", MushroomCow.class, 96),
-    SNOWMAN("snowman", Snowman.class, 97),
+    SNOWMAN("snow_golem", Snowman.class, 97),
     OCELOT("ocelot", Ocelot.class, 98),
-    IRON_GOLEM("villager_golem", IronGolem.class, 99),
+    IRON_GOLEM("iron_golem", IronGolem.class, 99),
     HORSE("horse", Horse.class, 100),
     RABBIT("rabbit", Rabbit.class, 101),
     POLAR_BEAR("polar_bear", PolarBear.class, 102),
@@ -238,7 +238,16 @@ public enum EntityType {
     LLAMA_SPIT("llama_spit", LlamaSpit.class, 104),
     PARROT("parrot", Parrot.class, 105),
     VILLAGER("villager", Villager.class, 120),
-    ENDER_CRYSTAL("ender_crystal", EnderCrystal.class, 200),
+    ENDER_CRYSTAL("end_crystal", EnderCrystal.class, 200),
+    TURTLE("turtle", Turtle.class, -1),
+    PHANTOM("phantom", Phantom.class, -1),
+    TRIDENT("trident", Trident.class, -1),
+    COD("cod", Cod.class, -1),
+    SALMON("salmon", Salmon.class, -1),
+    PUFFERFISH("pufferfish", PufferFish.class, -1),
+    TROPICAL_FISH("tropical_fish", TropicalFish.class, -1),
+    DROWNED("drowned", Drowned.class, -1),
+    DOLPHIN("dolphin", Dolphin.class, -1),
     // These don't have an entity ID in nms.EntityTypes.
     /**
      * A flying lingering potion
@@ -247,15 +256,15 @@ public enum EntityType {
     /**
      * A fishing line and bobber.
      */
-    FISHING_HOOK(null, FishHook.class, -1, false),
+    FISHING_HOOK("fishing_bobber", FishHook.class, -1, false),
     /**
      * A bolt of lightning.
      * <p>
      * Spawn with {@link World#strikeLightning(Location)}.
      */
-    LIGHTNING(null, LightningStrike.class, -1, false),
+    LIGHTNING("lightning_bolt", LightningStrike.class, -1, false),
     WEATHER(null, Weather.class, -1, false),
-    PLAYER(null, Player.class, -1, false),
+    PLAYER("player", Player.class, -1, false),
     COMPLEX_PART(null, ComplexEntityPart.class, -1, false),
     /**
      * Like {@link #ARROW} but tipped with a specific potion which is applied on
@@ -284,6 +293,20 @@ public enum EntityType {
                 ID_MAP.put(type.typeId, type);
             }
         }
+
+        // Add legacy names
+        NAME_MAP.put("xp_orb", EXPERIENCE_ORB);
+        NAME_MAP.put("eye_of_ender_signal", ENDER_SIGNAL);
+        NAME_MAP.put("xp_bottle", THROWN_EXP_BOTTLE);
+        NAME_MAP.put("fireworks_rocket", FIREWORK);
+        NAME_MAP.put("evocation_fangs", EVOKER_FANGS);
+        NAME_MAP.put("evocation_illager", EVOKER);
+        NAME_MAP.put("vindication_illager", VINDICATOR);
+        NAME_MAP.put("illusion_illager", ILLUSIONER);
+        NAME_MAP.put("commandblock_minecart", MINECART_COMMAND);
+        NAME_MAP.put("snowman", SNOWMAN);
+        NAME_MAP.put("villager_golem", IRON_GOLEM);
+        NAME_MAP.put("ender_crystal", ENDER_CRYSTAL);
     }
 
     private EntityType(String name, Class<? extends Entity> clazz, int typeId) {
@@ -316,7 +339,7 @@ public enum EntityType {
 
     /**
      *
-     * @return the raw type id 
+     * @return the raw type id
      * @deprecated Magic value
      */
     @Deprecated
diff --git a/src/main/java/org/bukkit/entity/Fish.java b/src/main/java/org/bukkit/entity/Fish.java
index 12ed1ed7..82e390b2 100644
--- a/src/main/java/org/bukkit/entity/Fish.java
+++ b/src/main/java/org/bukkit/entity/Fish.java
@@ -1,8 +1,6 @@
 package org.bukkit.entity;
 
 /**
- * Represents a fishing hook.
- * @deprecated in favor of {@link FishHook}
+ * Represents a fish entity.
  */
-public interface Fish extends FishHook {
-}
+public interface Fish extends WaterMob { }
diff --git a/src/main/java/org/bukkit/entity/Phantom.java b/src/main/java/org/bukkit/entity/Phantom.java
new file mode 100644
index 00000000..e64206a1
--- /dev/null
+++ b/src/main/java/org/bukkit/entity/Phantom.java
@@ -0,0 +1,18 @@
+
+package org.bukkit.entity;
+
+/**
+ * Represents a phantom.
+ */
+public interface Phantom extends Flying {
+
+    /**
+     * @return The size of the phantom
+     */
+    public int getSize();
+
+    /**
+     * @param sz The new size of the phantom.
+     */
+    public void setSize(int sz);
+}
diff --git a/src/main/java/org/bukkit/entity/PufferFish.java b/src/main/java/org/bukkit/entity/PufferFish.java
new file mode 100644
index 00000000..2d26c19b
--- /dev/null
+++ b/src/main/java/org/bukkit/entity/PufferFish.java
@@ -0,0 +1,21 @@
+package org.bukkit.entity;
+
+/**
+ * Represents a puffer fish.
+ */
+public interface PufferFish extends Fish {
+
+    /**
+     * Returns the current puff state of this fish (i.e. how inflated it is).
+     *
+     * @return current puff state
+     */
+    int getPuffState();
+
+    /**
+     * Sets the current puff state of this fish (i.e. how inflated it is).
+     *
+     * @param state new puff state
+     */
+    void setPuffState(int state);
+}
diff --git a/src/main/java/org/bukkit/entity/Salmon.java b/src/main/java/org/bukkit/entity/Salmon.java
new file mode 100644
index 00000000..a52a7af2
--- /dev/null
+++ b/src/main/java/org/bukkit/entity/Salmon.java
@@ -0,0 +1,7 @@
+
+package org.bukkit.entity;
+
+/**
+ * Represents a salmon fish.
+ */
+public interface Salmon extends Fish { }
diff --git a/src/main/java/org/bukkit/entity/Trident.java b/src/main/java/org/bukkit/entity/Trident.java
new file mode 100644
index 00000000..69d439f0
--- /dev/null
+++ b/src/main/java/org/bukkit/entity/Trident.java
@@ -0,0 +1,7 @@
+
+package org.bukkit.entity;
+
+/**
+ * Represents a thrown trident.
+ */
+public interface Trident extends Arrow { }
diff --git a/src/main/java/org/bukkit/entity/TropicalFish.java b/src/main/java/org/bukkit/entity/TropicalFish.java
new file mode 100644
index 00000000..51142170
--- /dev/null
+++ b/src/main/java/org/bukkit/entity/TropicalFish.java
@@ -0,0 +1,72 @@
+package org.bukkit.entity;
+
+import org.bukkit.DyeColor;
+
+/**
+ * Tropical fish.
+ */
+public interface TropicalFish extends Fish {
+
+    /**
+     * Gets the color of the fish's pattern.
+     *
+     * @return pattern color
+     */
+    DyeColor getPatternColor();
+
+    /**
+     * Sets the color of the fish's pattern
+     *
+     * @param color pattern color
+     */
+    void setPatternColor(DyeColor color);
+
+    /**
+     * Gets the color of the fish's body.
+     *
+     * @return pattern color
+     */
+    DyeColor getBodyColor();
+
+    /**
+     * Sets the color of the fish's body
+     *
+     * @param color body color
+     */
+    void setBodyColor(DyeColor color);
+
+    /**
+     * Gets the fish's pattern.
+     *
+     * @return pattern
+     */
+    Pattern getPattern();
+
+    /**
+     * Sets the fish's pattern
+     *
+     * @param pattern new pattern
+     */
+    void setPattern(Pattern pattern);
+
+    /**
+     * Enumeration of all different fish patterns. Refer to the
+     * <a href="https://minecraft.gamepedia.com/Fish_(mob)">Minecraft Wiki</a>
+     * for pictures.
+     */
+    public static enum Pattern {
+
+        KOB,
+        SUNSTREAK,
+        SNOOPER,
+        DASHER,
+        BRINELY,
+        SPOTTY,
+        FLOPPER,
+        STRIPEY,
+        GLITTER,
+        BLOCKFISH,
+        BETTY,
+        CLAYFISH;
+    }
+}
diff --git a/src/main/java/org/bukkit/entity/Turtle.java b/src/main/java/org/bukkit/entity/Turtle.java
new file mode 100644
index 00000000..0a4cd299
--- /dev/null
+++ b/src/main/java/org/bukkit/entity/Turtle.java
@@ -0,0 +1,6 @@
+package org.bukkit.entity;
+
+/**
+ * Represents a turtle.
+ */
+public interface Turtle extends Animals { }
-- 
2.11.0.windows.1

